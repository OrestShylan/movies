{"version":3,"file":"static/js/733.eb3e0222.chunk.js","mappings":"mTAGaA,EAAOC,EAAAA,GAAAA,GAAH,wJAQJC,EAAOD,EAAAA,GAAAA,GAAH,4SAYJE,EAAQF,EAAAA,GAAAA,IAAH,sGAOLG,EAAQH,EAAAA,GAAAA,EAAH,0MAWLI,GAAWJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,iD,6IC1BN,SAASM,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAiBC,EAAAA,EAAAA,IAAYC,EAAAA,IACnC,GAAkCC,EAAAA,EAAAA,UAASH,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,MAGAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiBC,aAAaC,QAAQ,kBAC5C,GAAIF,EAAgB,CAClB,IAAMG,EAAkBC,KAAKC,MAAML,GACnCF,EAAaK,EACd,CACF,GAAE,KAEHJ,EAAAA,EAAAA,YAAU,WACRE,aAAaK,QAAQ,iBAAkBF,KAAKG,UAAUV,GACvD,GAAE,CAACA,IAUJ,OACE,4BACE,6CAEA,SAAC,KAAD,UACGA,EAAUW,KAAI,WAA4CC,GAA5C,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,cAAeC,EAA7B,EAA6BA,YAA7B,OACb,SAAC,KAAD,WACE,4BACE,SAAC,KAAD,CAAOC,KAAKC,EAAAA,EAAAA,IAAaF,GAAcG,IAAKJ,KAC5C,SAAC,KAAD,iBAAQD,QAAR,IAAQA,EAAAA,EAASC,KACjB,mBAAQK,QAAS,kBAlBK,SAAAP,GAChCZ,GAAa,SAAAoB,GAAa,OACxBA,EAAcC,QAAO,SAAAC,GAAK,OAAIA,EAAMV,KAAOA,CAAjB,GADF,IAG1BnB,GAAS8B,EAAAA,EAAAA,IAAoBX,KAC7BY,EAAAA,EAAAA,IAAM,yBAA0B,CAAEC,KAAM,WACzC,CAYkCC,CAA0Bd,EAAhC,EAAjB,uCAJJ,UAAcA,EAAd,YAAoBC,EAApB,YAA6BF,GADhB,QActB,C","sources":["components/MoviesList/MoviesList.styled.jsx","pages/Favorites/Favorites.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: calc(-1 * 16px);\n  margin-bottom: calc(-1 * 32px);\n`;\n\nexport const Item = styled.li`\n  flex-basis: calc(100% / 3 - 16px);\n  margin-bottom: 52px;\n  margin-right: 16px;\n  max-width: 200px;\n  &:hover {\n    transform: scale(1.05);\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n  }\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 100%;\n  border-radius: 5px;\n  object-fit: cover;\n`;\n\nexport const Title = styled.p`\n  margin: 8px 0;\n  color: #000;\n  font-size: 14px;\n  font-weight: 500;\n  text-transform: uppercase;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n\nexport const ItemLink = styled(Link)`\n  text-decoration: none;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectFavoriteMovies,\n  removeFromFavorites,\n} from 'redux/movieSlice';\nimport {\n  List,\n  Item,\n  Image,\n  Title,\n} from '../../components/MoviesList/MoviesList.styled';\nimport { getPosterUrl } from 'redux/movieSlice';\nimport { toast } from 'react-toastify';\n\nexport default function Favorites() {\n  const dispatch = useDispatch();\n  const favoriteMovies = useSelector(selectFavoriteMovies);\n  const [favorites, setFavorites] = useState(favoriteMovies);\n\n  \n  useEffect(() => {\n    const savedFavorites = localStorage.getItem('favoriteMovies');\n    if (savedFavorites) {\n      const parsedFavorites = JSON.parse(savedFavorites);\n      setFavorites(parsedFavorites);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('favoriteMovies', JSON.stringify(favorites));\n  }, [favorites]);\n\n  const handleRemoveFromFavorites = id => {\n    setFavorites(prevFavorites =>\n      prevFavorites.filter(movie => movie.id !== id)\n    );\n    dispatch(removeFromFavorites(id));\n    toast('Removed from favorites', { type: 'warning' });\n  };\n\n  return (\n    <div>\n      <h2>Favorite Movies</h2>\n\n      <List>\n        {favorites.map(({ id, title, original_name, poster_path }, index) => (\n          <Item key={`${id}_${title}_${index}`}>\n            <div>\n              <Image src={getPosterUrl(poster_path)} alt={original_name} />\n              <Title>{title ?? original_name}</Title>\n              <button onClick={() => handleRemoveFromFavorites(id)}>\n                Remove from Favorites\n              </button>\n            </div>\n          </Item>\n        ))}\n      </List>\n    </div>\n  );\n}\n\n// ПРОБЛЕМА, КОЛИ Я НЕ МОЖУ ВИДАЛИТИ КОМПОНЕНТ ЗІ СПИСКУ\n\n// import React, { useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { selectFavoriteMovies, addToFavorites } from 'redux/movieSlice';\n// import {\n//   List,\n//   Item,\n//   Image,\n//   Title,\n//   ItemLink,\n// } from '../../components/MoviesList/MoviesList.styled';\n// import { getPosterUrl } from 'redux/movieSlice';\n\n// export default function Favorites() {\n//   const dispatch = useDispatch();\n//   const favoriteMovies = useSelector(selectFavoriteMovies);\n\n//   useEffect(() => {\n//     const savedFavorites = localStorage.getItem('favoriteMovies');\n//     if (savedFavorites) {\n//       const parsedFavorites = JSON.parse(savedFavorites);\n\n//       const isDuplicateId = parsedFavorites.some((movie, index) => {\n//         return parsedFavorites.findIndex(m => m.id === movie.id) !== index;\n//       });\n\n//       if (isDuplicateId) {\n//         console.log('Duplicate id found in savedFavorites:', parsedFavorites);\n//       }\n\n//       parsedFavorites.forEach(movie => {\n//         if (!favoriteMovies.some(favMovie => favMovie.id === movie.id)) {\n//           dispatch(addToFavorites(movie));\n//         }\n//       });\n//     }\n//   }, [dispatch, favoriteMovies]);\n\n//    useEffect(() => {\n//     localStorage.setItem('favoriteMovies', JSON.stringify(favoriteMovies));\n//   }, [favoriteMovies]);\n\n//   return (\n//     <div>\n//       <h2>Favorite Movies</h2>\n\n//       <List>\n//         {favoriteMovies.map(({ id, title, original_name, poster_path }) => {\n//           console.log('Rendering movie:', id, title); // Add this line for debugging\n//           return (\n//             <Item key={`${id}_${title}`}>\n//               <ItemLink to={`/movies/${id}`}>\n//                 <Image src={getPosterUrl(poster_path)} alt={original_name} />\n//                 <Title>{title ?? original_name}</Title>\n//               </ItemLink>\n//             </Item>\n//           );\n//         })}\n//       </List>\n\n//     </div>\n//   );\n// }\n\n// ПРОБЛЕМА, КОЛИ ПРИ ПЕРЕЗАВАНТАЖЕННІ ЗНИКАЄ СПИСОК\n\n// import React, { useEffect, useState } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import {\n//   selectFavoriteMovies,\n//   addToFavorites,\n//   removeFromFavorites,\n// } from 'redux/movieSlice';\n// import {\n//   List,\n//   Item,\n//   Image,\n//   Title,\n// } from '../../components/MoviesList/MoviesList.styled';\n// import { getPosterUrl } from 'redux/movieSlice';\n\n// export default function Favorites() {\n//   const dispatch = useDispatch();\n//   const favoriteMovies = useSelector(selectFavoriteMovies);\n//   const [favorites, setFavorites] = useState(favoriteMovies);\n\n//   useEffect(() => {\n//     const savedFavorites = localStorage.getItem('favoriteMovies');\n//     if (savedFavorites) {\n//       const parsedFavorites = JSON.parse(savedFavorites);\n\n//       const isDuplicateId = parsedFavorites.some((movie, index) => {\n//         return parsedFavorites.findIndex(m => m.id === movie.id) !== index;\n//       });\n\n//       if (isDuplicateId) {\n//         console.log('Duplicate id found in savedFavorites:', parsedFavorites);\n//       }\n\n//       parsedFavorites.forEach(movie => {\n//         if (!favorites.some(favMovie => favMovie.id === movie.id)) {\n//           dispatch(addToFavorites(movie));\n//         }\n//       });\n//     }\n//   }, [dispatch, favoriteMovies, favorites]);\n\n//   useEffect(() => {\n//     localStorage.setItem('favoriteMovies', JSON.stringify(favorites));\n//   }, [favorites]);\n\n//   const handleRemoveFromFavorites = id => {\n//     setFavorites(prevFavorites =>\n//       prevFavorites.filter(movie => movie.id !== id)\n//     );\n//     dispatch(removeFromFavorites(id));\n//   };\n\n//   return (\n//     <div>\n//       <h2>Favorite Movies</h2>\n\n//       <List>\n//         {favorites.map(({ id, title, original_name, poster_path }, index) => (\n//           <Item key={`${id}_${title}_${index}`}>\n//             <div>\n//               <Image src={getPosterUrl(poster_path)} alt={original_name} />\n//               <Title>{title ?? original_name}</Title>\n//               <button onClick={() => handleRemoveFromFavorites(id)}>\n//                 Remove from Favorites\n//               </button>\n//             </div>\n//           </Item>\n//         ))}\n//       </List>\n//     </div>\n//   );\n// }\n"],"names":["List","styled","Item","Image","Title","ItemLink","Link","Favorites","dispatch","useDispatch","favoriteMovies","useSelector","selectFavoriteMovies","useState","favorites","setFavorites","useEffect","savedFavorites","localStorage","getItem","parsedFavorites","JSON","parse","setItem","stringify","map","index","id","title","original_name","poster_path","src","getPosterUrl","alt","onClick","prevFavorites","filter","movie","removeFromFavorites","toast","type","handleRemoveFromFavorites"],"sourceRoot":""}
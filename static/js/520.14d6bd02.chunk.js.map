{"version":3,"file":"static/js/520.14d6bd02.chunk.js","mappings":"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","sources":["api/api-service.js","components/MoviesList/MoviesList.jsx","components/MoviesList/MoviesList.styled.jsx","pages/Home/Home.styled.jsx","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '48978cb53ccabb273ee7577d68beda02';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nexport const fetchTrendingMovies = () => {\n  const response = axios.get(`/trending/all/day?api_key=${API_KEY}`);\n  return response;\n};\n\nexport const fetchMoviesByName = searchValue => {\n  const response = axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${searchValue}&language=en-US&page=1&include_adult=false`\n  );\n  return response;\n};\n\nexport const fetchMoviesById = movieId => {\n  const response = axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response;\n};\n\nexport const fetchCast = movieId => {\n  const response = axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response;\n};\n\nexport const fetchReviews = movieId => {\n  const response = axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response;\n};\n\nexport const getPosterUrl = url =>\n  url\n    ? `https://image.tmdb.org/t/p/w500${url}`\n    : `https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQq_wGA4J08YoSd2-aTz9OQrZeSA2fnZxEbOA&usqp=CAU`;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getPosterUrl } from '../../api/api-service';\nimport { List, Item, Image, Title, ItemLink } from './MoviesList.styled';\n\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  console.log(movies);\n  if (!movies || !Array.isArray(movies)) {\n    return <p>No movies available.</p>;\n  }\n return (\n   <List>\n     {movies.map(({ id, title, original_name, poster_path }) => {\n       return (\n         <Item key={id}>\n           <ItemLink to={`/movies/${id}`} state={{ from: location }}>\n             <Image src={getPosterUrl(poster_path)} alt={original_name} />{' '}\n             <Title key={id}>{title ?? original_name}</Title>\n           </ItemLink>\n         </Item>\n       );\n     })}\n   </List>\n );\n};\n\n// ========================================================================================================\n// export const MoviesList = ({ movies }) => {\n//   const location = useLocation();\n\n//   if (!Array.isArray(movies) || movies.length === 0) {\n//     return <p>No movies found.</p>;\n//   }\n\n//   return (\n//     <List>\n//       {movies.map(({ id, title, original_name, poster_path }) => {\n//         return (\n//           <Item key={id}>\n//             <ItemLink to={`/movies/${id}`} state={{ from: location }}>\n//               <Image src={getPosterUrl(poster_path)} alt={original_name} />{' '}\n//               <Title>{title ?? original_name}</Title>\n//             </ItemLink>\n//           </Item>\n//         );\n//       })}\n//     </List>\n//   );\n// };\n\n// ==========================================================================================================\n\n// export const MoviesList = ({ movies }) => {\n//   const location = useLocation();\n//   if (!movies) {\n//     return null;\n//   }\n\n//   return (\n//     <List>\n//       {movies.results.map(({ id, title, original_name, poster_path }) => {\n//         return (\n//           <Item key={id}>\n//             <ItemLink to={`/movies/${id}`} state={{ from: location }}>\n//               <Image src={getPosterUrl(poster_path)} alt={original_name} />{' '}\n//               <Title>{title ?? original_name}</Title>\n//             </ItemLink>\n//           </Item>\n//         );\n//       })}\n//     </List>\n//   );\n// };\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: calc(-1 * 16px);\n  margin-bottom: calc(-1 * 32px);\n`;\n\nexport const Item = styled.li`\n  flex-basis: calc(100% / 3 - 16px);\n  margin-bottom: 52px;\n  margin-right: 16px;\n  max-width: 200px;\n  &:hover {\n    transform: scale(1.05);\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n  }\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 100%;\n  border-radius: 5px;\n  object-fit: cover;\n`;\n\nexport const Title = styled.p`\n  margin: 8px 0;\n  color: #000;\n  font-size: 14px;\n  font-weight: 500;\n  text-transform: uppercase;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n\nexport const ItemLink = styled(Link)`\n  text-decoration: none;\n`;\n","import styled from 'styled-components';\n\nexport const Main = styled.div`\n  width: 1440px;\n  padding-left: 20px;\n  padding-right: 20px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Title = styled.h2`\n  text-transform: uppercase;\n  font-size: 32px;\n  font-weight: 600;\n`;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  position: relative;\n  width: 380px;\n  margin: 30px auto;\n`;\n\nexport const Input = styled.input`\n  padding: 0 14px 4px 0;\n  font-style: normal;\n  font-weight: 400;\n  font-size: 20px;\n  line-height: 1.14;\n  display: flex;\n  align-items: center;\n  width: 380px;\n  height: 30px;\n  background-color: transparent;\n  outline-color: transparent;\n  border: none;\n  border-bottom: 1px solid #000;\n  color: #000;\n  outline: 0 none;\n  outline-offset: 0;\n  &:focus,\n  &:hover {\n    border: transparent;\n    border-bottom: 1px solid #ff6b08;\n  }\n  &::placeholder {\n    opacity: 1;\n  }\n`;\n\nexport const Button = styled.button`\n  position: absolute;\n  justify-content: end;\n  text-align: center;\n  width: 40px;\n  height: 40px;\n  right: -8px;\n  bottom: -4px;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  &:hover {\n    color: #000;\n    opacity: 1;\n  }\n`;\n","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { ImSearch } from 'react-icons/im';\nimport PropTypes from 'prop-types';\nimport { fetchMoviesByName } from '../../api/api-service';\n\nimport { Form, Input, Button } from './SearchForm.styled';\n\n// export const SearchForm = ({ onSubmit }) => {\n//   const [searchValue, setSearchValue] = useState('');\n\n//   const hendelChange = evt => {\n//     setSearchValue(evt.currentTarget.value);\n//   };\n\n//   const hendelSubmit = async evt => {\n//     evt.preventDefault();\n\n//     if (searchValue.trim() === '') {\n//       toast.warn('Sorry, you need to enter a movie title.');\n//       return;\n//     } else if (searchValue === '') {\n//       onSubmit(searchValue);\n//       setSearchValue('');\n//     } else {\n//       try {\n//         const response = await fetchMoviesByName(searchValue);\n//         const results = response.data.results;\n//         if (results.length === 0) {\n//           toast.error('No results found.');\n//         } else {\n//           onSubmit(searchValue);\n//           setSearchValue('');\n//         }\n//       } catch (error) {\n//         console.error('Error during search:', error);\n//         toast.error(\n//           'An error occurred while searching. Please try again later.'\n//         );\n//       }\n//     }\n//   };\n\n//   return (\n//     <Form onSubmit={hendelSubmit}>\n//       <Input\n//         type=\"text\"\n//         placeholder=\"Search movie\"\n//         value={searchValue}\n//         onChange={hendelChange}\n//       />\n//       <Button type=\"submit\">\n//         <ImSearch />\n//       </Button>\n//     </Form>\n//   );\n// };\n\nexport const SearchForm = ({ onSubmit }) => {\n  const [searchValue, setSearchValue] = useState('');\n\n  const hendelChange = evt => {\n    setSearchValue(evt.currentTarget.value);\n  };\n\n  const hendelSubmit = async evt => {\n    evt.preventDefault();\n\n    if (searchValue.trim() === '') {\n      toast.warn('Sorry, you need to enter a movie title.');\n      return;\n    }\n\n    console.log(searchValue); // Додав console.log для відстеження введеного значення\n\n    try {\n      const response = await fetchMoviesByName(searchValue);\n      const results = response.data.results;\n      if (results.length === 0) {\n        toast.error('No results found.');\n      } else {\n        onSubmit(searchValue);\n        setSearchValue('');\n      }\n    } catch (error) {\n      console.error('Error during search:', error);\n      toast.error('An error occurred while searching. Please try again later.');\n    }\n  };\n\n  return (\n    <Form onSubmit={hendelSubmit}>\n      <Input\n        type=\"text\"\n        placeholder=\"Search movie\"\n        value={searchValue}\n        onChange={hendelChange}\n      />\n      <Button type=\"submit\">\n        <ImSearch />\n      </Button>\n    </Form>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState} from 'react';\n// import { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport * as API from '../../api/api-service';\n\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Main } from '../Home/Home.styled';\n\nexport default function Movies() {\n  const [moviesByName, setMoviesByName] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSearchForm = async searchValue => {\n    if (searchValue.trim() === '') {\n      toast.warn('Sorry, you need to enter a movie title.');\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const response = await API.fetchMoviesByName(searchValue);\n      const data = response.data;\n      if (data && data.results) {\n        setMoviesByName(data.results);\n      } else {\n        setMoviesByName([]);\n      }\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n      toast.error(error.message);\n    }\n  };\n\n  return (\n    <Main>\n      <SearchForm onSubmit={handleSearchForm} />\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : moviesByName && moviesByName.length > 0 ? (\n        <MoviesList movies={moviesByName} />\n      ) : (\n        <p></p>\n      )}\n    </Main>\n  );\n}\n\n// import { useState, useEffect } from 'react';\n// import { useSearchParams } from 'react-router-dom';\n// import { toast } from 'react-toastify';\n\n// import * as API from '../../api/api-service';\n\n// import { SearchForm } from 'components/SearchForm/SearchForm';\n// // import { Loader } from 'components/Loader/Loader';\n// import { MoviesList } from 'components/MoviesList/MoviesList';\n// import { Main } from '../Home/Home.styled';\n\n// export default function Movies() {\n//   const [moviesByName, setMoviesByName] = useState([]);\n//   const [searchParams, setSearchParams] = useSearchParams();\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const handleSearchForm = searchValue => {\n//     setSearchParams({ query: searchValue });\n//   };\n\n//   useEffect(() => {\n//     const value = searchParams.get('query');\n//     if (!value) {\n//       setMoviesByName([]); // Очистити список фільмів, якщо `query` порожній\n//       return;\n//     }\n\n//     if (!isLoading) {\n//       setIsLoading(true);\n\n//       API.fetchMoviesByName(value)\n//         .then(({ data }) => {\n//           if (data && data.results) {\n//             setMoviesByName(data.results);\n//           } else {\n//             setMoviesByName([]); // Очистити список фільмів, якщо результат порожній\n//           }\n//           setIsLoading(false);\n//         })\n//         .catch(error => {\n//           setIsLoading(false);\n//           toast.error(error.message);\n//         });\n//     }\n//   }, [searchParams, isLoading]);\n\n//   return (\n//     <Main>\n//       <SearchForm onSubmit={handleSearchForm} />\n//       {/* {isLoading && <Loader />} */}\n//       {moviesByName && moviesByName.length > 0 ? ( // Перевірити, чи moviesByName не порожній\n//         <MoviesList movies={moviesByName} />\n//       ) : (\n//         <p>No movies found.</p>\n//       )}\n//     </Main>\n//   );\n// }\n"],"names":["API_KEY","axios","fetchMoviesByName","searchValue","fetchCast","movieId","fetchReviews","getPosterUrl","url","MoviesList","movies","location","useLocation","console","log","Array","isArray","map","id","title","original_name","poster_path","to","state","from","src","alt","List","styled","Item","Image","Title","ItemLink","Link","Main","Form","Input","Button","SearchForm","onSubmit","useState","setSearchValue","hendelSubmit","evt","preventDefault","trim","toast","response","data","results","length","error","type","placeholder","value","onChange","currentTarget","Movies","moviesByName","setMoviesByName","isLoading","setIsLoading","handleSearchForm","API","message"],"sourceRoot":""}